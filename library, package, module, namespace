== MODULES & SCRIPTS ====================================================================================
A module is the name of any source file with extension .py

It is merely a collection of functions and variable declarations that you can import to avoid
repeated code and to store for later when a shell session is terminated.

A script is basically a module with statements. A "pure module" would
simply be one with no statements in it. However, since this is only a semantic difference,
any module that can be run and does something but also defines functions can be thought of as both
a module and a script.

Syntax considerations:
1. Importing a module named myModule.py:
>> import myModule
This does not bring the definitions inside your module. Thus, you may not access any function
inside the module on its own; you have to write myModule.myFunction()

2. What if a module contains executable statements:
If the first line in myModule.py has a print statement, the command window will show the message
when the module is first imported.

3. Each module has its own private symbol table, which is used as the global symbol table by all
functions defined in the module. Thus, the author of a module can use global variables in the module
without worrying about accidental clashes with a user’s global variables. On the other hand, if you
know what you are doing you can touch a module’s global variables with the same notation used to refer
to its functions, modname.itemname.
Modules can import other modules. It is customary but not required to place all import statements at the
beginning of a module (or script, for that matter). The imported module names are placed in the importing
module’s global symbol table.

4. Complete import vs selective import:
It is usually not recommended to import like this:
>> from myModule import *
because this does bring all function and variable names from the module, and since you don't have to
know or remember all of those names, you may find conflicts with the names you give in your code.
It is then better to import like this:
>> from myModule import myFunction1, myFunction2
or rather, import like this:
>> import myModule as mMod
You can even use the "as" keyword to refer to functions:
>> from myModule import myFunction1 as f
which is equivalent to assigning a local name to a module function by doing this:
>> import myModule
>> f = myModule.myFunction1

5. You can execute modules as scripts. Say that myModule.py contains only one myFunction1(x)=3x,
and then, at the end, it contains a conditional statement like this:
>> if __name__ == "__main__":
>>      import sys
>>      print(myFunction1(sys.argv[1]))
Then you will be introducing different behaviours depending on whether myModule.py is executed
as a script or imported as a pure module. This is because, in an interpreter, if you run
>> python myModule.py 42.8
it will immediately assign the module's meta-variable __name__ to "__main__", and thus the if-statement
will be met, and so the executable part of the myModule.py module, put inside the if-statement, will
be run and you will be returned 3*42.8 on the command window.
If, instead, you type
>> import myModule
on another python file or module, then __name__ will remain "myModule", and so the if-clause will
return False and the executable part will not be run, thus effectively running myModule.py as a
pure module.



== NAMESPACES ==========================================================================================
A namespace or context is a meta-dictionary containing names (identifiers) for variables, functions
and more complex structures. This allows for the same identifier to point to a different thing when
those things belong to different namespaces. They are used to restrict the scope of use of an identifier.
An analogy is the OS namespace determined by each directory path. You may have files with identical
names saved in different directories because they belong to different namespaces correspondingly.
Some in-built namespaces in Python:
- "Global names" of a module
- "Local names" in a function or method call
- "Built-in names" such as abs(), print(), range(), etc.
Any dictionary that you define is also a local-like namespace.




== PACKAGES ============================================================================================
Packages are a way of structuring Python’s module namespace by using “dotted module names”. For example, the
module name A.B designates a submodule named B in a package named A. Just like the use of modules saves the
authors of different modules from having to worry about each other’s global variable names, the use of dotted
module names saves the authors of multi-module packages like NumPy or Pillow from having to worry about each
other’s module names.
The __init__.py files are required to make Python treat directories containing the file as packages. This prevents
directories with a common name, such as string, unintentionally hiding valid modules that occur later on the module
search path. In the simplest case, __init__.py can just be an empty file, but it can also execute initialization
code for the package or set the __all__ variable.
The only solution is for the package author to provide an explicit index of the package. The import statement uses
the following convention: if a package’s __init__.py code defines a list named __all__, it is taken to be the list
of module names that should be imported when from package import * is encountered. It is up to the package author to
keep this list up-to-date when a new version of the package is released. Package authors may also decide not to
support it, if they don’t see a use for importing * from their package.
If __all__ is not defined, the statement from..import * does not import all submodules from the package
into the current namespace; it only ensures that the package sound.effects has been imported (possibly running
any initialization code in __init__.py) and then imports whatever names are defined in the package. This includes
any names defined (and submodules explicitly loaded) by __init__.py. It also includes any submodules of the package
that were explicitly loaded by previous import statements.





== LIBRARIES ===========================================================================================
A library is nothing but a widely-distributed, extensive, basic and well-documented package. Since a package
may contain sub-packages, a library can be considered a package itself consisting of many other sub-packages.
The term is nowadays mostly used to refer to THE Python Standard Library, which comes with every distribution.